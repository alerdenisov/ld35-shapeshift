//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {
    public partial class Entity {
        public ShapeTetris.Components.PieceApplyRotation pieceApplyRotation { get { return (ShapeTetris.Components.PieceApplyRotation)GetComponent(GameComponentIds.PieceApplyRotation); } }

        public bool hasPieceApplyRotation { get { return HasComponent(GameComponentIds.PieceApplyRotation); } }

        public Entity AddPieceApplyRotation(ShapeTetris.Enums.RotateDirection newDirection) {
            var component = CreateComponent<ShapeTetris.Components.PieceApplyRotation>(GameComponentIds.PieceApplyRotation);
            component.Direction = newDirection;
            return AddComponent(GameComponentIds.PieceApplyRotation, component);
        }

        public Entity ReplacePieceApplyRotation(ShapeTetris.Enums.RotateDirection newDirection) {
            var component = CreateComponent<ShapeTetris.Components.PieceApplyRotation>(GameComponentIds.PieceApplyRotation);
            component.Direction = newDirection;
            ReplaceComponent(GameComponentIds.PieceApplyRotation, component);
            return this;
        }

        public Entity RemovePieceApplyRotation() {
            return RemoveComponent(GameComponentIds.PieceApplyRotation);
        }
    }
}

    public partial class GameMatcher {
        static IMatcher _matcherPieceApplyRotation;

        public static IMatcher PieceApplyRotation {
            get {
                if (_matcherPieceApplyRotation == null) {
                    var matcher = (Matcher)Matcher.AllOf(GameComponentIds.PieceApplyRotation);
                    matcher.componentNames = GameComponentIds.componentNames;
                    _matcherPieceApplyRotation = matcher;
                }

                return _matcherPieceApplyRotation;
            }
        }
    }

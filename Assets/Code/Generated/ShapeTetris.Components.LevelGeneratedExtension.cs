//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {
    public partial class Entity {
        public ShapeTetris.Components.Level level { get { return (ShapeTetris.Components.Level)GetComponent(GameComponentIds.Level); } }

        public bool hasLevel { get { return HasComponent(GameComponentIds.Level); } }

        public Entity AddLevel(int newWidth, int newHeight) {
            var component = CreateComponent<ShapeTetris.Components.Level>(GameComponentIds.Level);
            component.Width = newWidth;
            component.Height = newHeight;
            return AddComponent(GameComponentIds.Level, component);
        }

        public Entity ReplaceLevel(int newWidth, int newHeight) {
            var component = CreateComponent<ShapeTetris.Components.Level>(GameComponentIds.Level);
            component.Width = newWidth;
            component.Height = newHeight;
            ReplaceComponent(GameComponentIds.Level, component);
            return this;
        }

        public Entity RemoveLevel() {
            return RemoveComponent(GameComponentIds.Level);
        }
    }

    public partial class Pool {
        public Entity levelEntity { get { return GetGroup(GameMatcher.Level).GetSingleEntity(); } }

        public ShapeTetris.Components.Level level { get { return levelEntity.level; } }

        public bool hasLevel { get { return levelEntity != null; } }

        public Entity SetLevel(int newWidth, int newHeight) {
            if (hasLevel) {
                throw new EntitasException("Could not set level!\n" + this + " already has an entity with ShapeTetris.Components.Level!",
                    "You should check if the pool already has a levelEntity before setting it or use pool.ReplaceLevel().");
            }
            var entity = CreateEntity();
            entity.AddLevel(newWidth, newHeight);
            return entity;
        }

        public Entity ReplaceLevel(int newWidth, int newHeight) {
            var entity = levelEntity;
            if (entity == null) {
                entity = SetLevel(newWidth, newHeight);
            } else {
                entity.ReplaceLevel(newWidth, newHeight);
            }

            return entity;
        }

        public void RemoveLevel() {
            DestroyEntity(levelEntity);
        }
    }
}

    public partial class GameMatcher {
        static IMatcher _matcherLevel;

        public static IMatcher Level {
            get {
                if (_matcherLevel == null) {
                    var matcher = (Matcher)Matcher.AllOf(GameComponentIds.Level);
                    matcher.componentNames = GameComponentIds.componentNames;
                    _matcherLevel = matcher;
                }

                return _matcherLevel;
            }
        }
    }
